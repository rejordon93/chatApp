import prisma from "@/app/database/prisma";
import bcryptjs from "bcryptjs";
import { revalidatePath } from "next/cache";
import AddButton from "./addButton";

export default async function SignUp() {
  async function UserSignUp(formData: FormData) {
    "use server";
    try {
      const username = formData.get("username") as string;
      const email = formData.get("email") as string;
      const password = formData.get("password") as string;

      const existingUser = await prisma.user.findFirst({
        where: { OR: [{ email }, { username }] },
      });
      if (existingUser) {
        throw new Error("Username or email already exists.");
      }

      const salt = await bcryptjs.genSalt(10);
      const hashedPassword = await bcryptjs.hash(password, salt);

      await prisma.user.create({
        data: {
          username,
          email,
          password: hashedPassword,
        },
      });
      revalidatePath("/");
    } catch (e) {
      console.error(e);
      throw e; // Let the client handle the error
    }
  }

  return <div>{/* <AddButton UserSignUp={UserSignUp} / */}</div>;
}
import React from "react";
import prisma from "@/app/database/prisma";
import bcryptjs from "bcryptjs";
import jwt from "jsonwebtoken";
import { cookies } from "next/headers"; // Added for cookie handling
import LoginButton from "./loginButton";

export default async function Login() {
  async function UserLogin(formData: FormData) {
    "use server";
    try {
      const email = formData.get("email") as string;
      const password = formData.get("password") as string;

      const user = await prisma.user.findUnique({ where: { email } });
      if (!user) {
        return { success: false, message: "Invalid no user" };
      }

      const validPassword = await bcryptjs.compare(password, user.password);
      if (!validPassword) {
        return { success: false, message: "Invalid no password" };
      }

      const tokenData = { id: user.id };
      const token = jwt.sign(tokenData, process.env.TOKEN_SECRET!, {
        expiresIn: "1d",
      });

      // Set the token as an HTTP-only cookie
      (
        await // Set the token as an HTTP-only cookie
        cookies()
      ).set("token", token, {
        httpOnly: true, // Prevents JavaScript access
        secure: process.env.NODE_ENV === "production", // HTTPS only in production
        sameSite: "strict", // Mitigates CSRF
        maxAge: 86400, // 1 day in seconds
        path: "/", // Available site-wide
      });

      return {
        success: true,
        message: "Login successful",
        username: user.username,
        email: user.email,
      };
    } catch (e) {
      console.error("Login error:", e);
      return { success: false, message: "An error occurred during login" };
    }
  }

  return (
    <div>
      <LoginButton UserLogin={UserLogin} />
    </div>
  );
}
